// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: services/mapper.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapperServiceClient is the client API for MapperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapperServiceClient interface {
	RunMap(ctx context.Context, in *RunMapInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitReduce(ctx context.Context, in *InitReduceInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mapperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapperServiceClient(cc grpc.ClientConnInterface) MapperServiceClient {
	return &mapperServiceClient{cc}
}

func (c *mapperServiceClient) RunMap(ctx context.Context, in *RunMapInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/services.MapperService/RunMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapperServiceClient) InitReduce(ctx context.Context, in *InitReduceInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/services.MapperService/InitReduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapperServiceServer is the server API for MapperService service.
// All implementations must embed UnimplementedMapperServiceServer
// for forward compatibility
type MapperServiceServer interface {
	RunMap(context.Context, *RunMapInput) (*emptypb.Empty, error)
	InitReduce(context.Context, *InitReduceInput) (*emptypb.Empty, error)
	mustEmbedUnimplementedMapperServiceServer()
}

// UnimplementedMapperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMapperServiceServer struct {
}

func (UnimplementedMapperServiceServer) RunMap(context.Context, *RunMapInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMap not implemented")
}
func (UnimplementedMapperServiceServer) InitReduce(context.Context, *InitReduceInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitReduce not implemented")
}
func (UnimplementedMapperServiceServer) mustEmbedUnimplementedMapperServiceServer() {}

// UnsafeMapperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapperServiceServer will
// result in compilation errors.
type UnsafeMapperServiceServer interface {
	mustEmbedUnimplementedMapperServiceServer()
}

func RegisterMapperServiceServer(s grpc.ServiceRegistrar, srv MapperServiceServer) {
	s.RegisterService(&MapperService_ServiceDesc, srv)
}

func _MapperService_RunMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunMapInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServiceServer).RunMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.MapperService/RunMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServiceServer).RunMap(ctx, req.(*RunMapInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapperService_InitReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitReduceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServiceServer).InitReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.MapperService/InitReduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServiceServer).InitReduce(ctx, req.(*InitReduceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// MapperService_ServiceDesc is the grpc.ServiceDesc for MapperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.MapperService",
	HandlerType: (*MapperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunMap",
			Handler:    _MapperService_RunMap_Handler,
		},
		{
			MethodName: "InitReduce",
			Handler:    _MapperService_InitReduce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/mapper.proto",
}
