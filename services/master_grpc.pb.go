// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: services/master.proto

package services

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	InitCluster(ctx context.Context, in *IcInput, opts ...grpc.CallOption) (*empty.Empty, error)
	RunMapRd(ctx context.Context, opts ...grpc.CallOption) (MasterService_RunMapRdClient, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) InitCluster(ctx context.Context, in *IcInput, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/services.MasterService/InitCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RunMapRd(ctx context.Context, opts ...grpc.CallOption) (MasterService_RunMapRdClient, error) {
	stream, err := c.cc.NewStream(ctx, &MasterService_ServiceDesc.Streams[0], "/services.MasterService/RunMapRd", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterServiceRunMapRdClient{stream}
	return x, nil
}

type MasterService_RunMapRdClient interface {
	Send(*RunMapRdInput) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type masterServiceRunMapRdClient struct {
	grpc.ClientStream
}

func (x *masterServiceRunMapRdClient) Send(m *RunMapRdInput) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterServiceRunMapRdClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	InitCluster(context.Context, *IcInput) (*empty.Empty, error)
	RunMapRd(MasterService_RunMapRdServer) error
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) InitCluster(context.Context, *IcInput) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitCluster not implemented")
}
func (UnimplementedMasterServiceServer) RunMapRd(MasterService_RunMapRdServer) error {
	return status.Errorf(codes.Unimplemented, "method RunMapRd not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_InitCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IcInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).InitCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.MasterService/InitCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).InitCluster(ctx, req.(*IcInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RunMapRd_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServiceServer).RunMapRd(&masterServiceRunMapRdServer{stream})
}

type MasterService_RunMapRdServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*RunMapRdInput, error)
	grpc.ServerStream
}

type masterServiceRunMapRdServer struct {
	grpc.ServerStream
}

func (x *masterServiceRunMapRdServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterServiceRunMapRdServer) Recv() (*RunMapRdInput, error) {
	m := new(RunMapRdInput)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitCluster",
			Handler:    _MasterService_InitCluster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunMapRd",
			Handler:       _MasterService_RunMapRd_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/master.proto",
}
